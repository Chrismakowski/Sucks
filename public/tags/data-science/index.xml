<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Science on Chris&#39; Data Science Blog</title>
    <link>/tags/data-science/</link>
    <description>Recent content in Data Science on Chris&#39; Data Science Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Chris Makowski</copyright>
    <lastBuildDate>Tue, 14 Nov 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/data-science/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Let’s Check Out a Barplot!</title>
      <link>/post/let-s-check-out-a-barplot/</link>
      <pubDate>Tue, 14 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/let-s-check-out-a-barplot/</guid>
      <description>&lt;p&gt;Let’s construct a barplot! To start, let’s install the three essential libraries: Lahman, sqldf, and ggplot2. Next, let’s establish a query so our barplot can have something to represent. Let’s ask how many homeruns were recorded by each MLB team during the 1980’s season. To set up our query we need to find how many homeruns were recorded and the name of each team during the year 1980, but let’s make sure our barplot is ordered efficiently. So we are going to have each bar represent the amount of homeruns. That extracted data should look something like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(Lahman)
library(sqldf)
library(ggplot2)

#extracting the data------------

query&amp;lt;-&amp;quot;SELECT name,HR
FROM Teams
WHERE yearID=1980
ORDER BY HR&amp;quot;

result&amp;lt;-sqldf(query)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to visualize the barplot we need to run ggplot, and in order to do this we must run the ggplot as ‘ggplot()+.’ On the next line, we run ‘geom_line()’ and plug in the data of the barplot inside following parentheses to construct the bar of the barplot. The information to be provided includes: the results of the query (‘data=result’), the x and y axis (‘aes(x=name,y=HR’)), the statistics (‘stat=’identity’‘), and for flare: the color of the line (’color=’pink’‘), and the color of the bar (’fill=’light blue’‘). Thus is what one needs for a visualization of the data, however, let’s spice it up even more. To begin, place a’+‘symbol at the end of the syntax of ggplot to allow for further modifications. Now, let’s have the data represented on the x and y axis flipped so the data can be read horizontally (’coord_flip()’), and add a ‘+’ at the end for more additions. To re-write the x and y axis to something more pleasing like ‘Homeruns’ on the x-axis use ‘xlab(’Homeruns’)+‘and ’Teams’ on the y-axis use ‘ylab(’Teams’)‘. Use one more’+‘so we can add a title and to add a title all you need to write is ’ggtitle()’ and inside the parantheses let’s say ‘1980 Team Homerun Distribution’. Just one more thing, to tidy up our barplot and make it look professional, let’s ensure the data is shown in descending order. To do this you need to write ‘result&lt;span class=&#34;math inline&#34;&gt;\(name&amp;lt;-factor(result\)&lt;/span&gt;name,levels=result$name),’ and place it before the ‘ggplot()’. And all together it shoud look like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#visualizing the data------------

result$name&amp;lt;-factor(result$name,levels=result$name)

ggplot()+
  geom_bar(data=result,aes(x=name,y=HR),stat=&amp;#39;identity&amp;#39;,color=&amp;#39;pink&amp;#39;,fill=&amp;#39;light blue&amp;#39;)+
  coord_flip()+
  ylab(&amp;#39;Homeruns&amp;#39;)+
  xlab(&amp;#39;Teams&amp;#39;)+
  ggtitle(&amp;quot;1980 Team Homerun Distribution&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-11-14-let-s-check-out-a-barplot_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;And that is how you do it! If you have any questions feel free to contact me and tune in for more exciting posts about the wonderous world of Rstudio and Data Science!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Scatterplot</title>
      <link>/post/scatterplot/</link>
      <pubDate>Fri, 06 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/scatterplot/</guid>
      <description>&lt;p&gt;Let’s construct a scatterplot! First, let’s upload the three essential libraries: Lahman, sqldf, and ggplot2. Next, let’s establish and run a query to see the relationship between Strikeouts and Homeruns of great hitters. To set up our query, we need to run the ‘playerID’ to find these sluggers, so to make sure we have great hitters, let’s make sure the player we use have at least 400 homeruns. After, the ‘playerID’ we use ‘sum(HR),’ to calculate the sum of homeruns and for thier career plug in, ‘AS career_HR.’ On the same line let’s plug in ‘sum(SO)’ and ‘AS career_SO’ to find the total of strikeouts for their career, and we find all of them in ‘Batting.’ Let’s ensure we group this chart by the players so type in ‘GROUP BY playerID,’ and to find the total of homeruns plug in ‘HAVING sum(HR)&amp;gt;=400.’ Now we can find the totals in a column in the console of Rstudio. However, wouldn’t it be nice to see the results in a visual manner?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(Lahman)
library(ggplot2) 
library(sqldf) 

# extracting the data----------------
query&amp;lt;-&amp;quot;SELECT playerID,sum(HR) AS career_HR,sum(SO) AS career_SO
FROM Batting
GROUP BY playerID
HAVING sum(HR)&amp;gt;=400&amp;quot;
result&amp;lt;-sqldf(query)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to set up a scatterplot, we need to run a ‘ggplot,’ to do this, and allow for further modifications on the scatterplot, we must run the ggplot as ‘ggplot()+.’ On the next line, we run ‘geom_point()’ and plug in the data of the scatterplot inside following parentheses to construct the points of the scatterplot. Such information includes the HR’s and SO’s represented in ‘data=result,’ the syntax of the x-axis and y-axis ‘aes(x=career_SO,y=career_HR),’ the size of the points, and to keep them at a good size let’s use ‘size=3’ while keeping them pretty with the color purple represented as ‘color=purple.’ To allow for a title to be placed on the scatterplot, just as the histogram, and time series, place a ‘+’ sign at the end of the preceeding syntax and plug in ‘ggtitle(),’ in this case let’s use ‘Career Strikeouts VS Homeruns for Great Hitters.’ Just to spice it up let’s re-name the x and y- axis, to do this we need to run ‘xlab,’ and on the next line ‘ylab,’ so we need to again type ‘+’ on the preceeding syntax. On ‘xlab’ let’s re-name ‘career_SO’ to ‘Career Strikeouts’ and on the next line for ‘career_HR’ let’s re-name it ‘Career Homeruns.’&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#visualize the data------------------

ggplot()+
  geom_point(data=result,aes(x=career_SO,y=career_HR),size=3,color=&amp;quot;purple&amp;quot;)+
  ggtitle(&amp;quot;Career Strikeouts VS Homeruns for Great Hitters&amp;quot;)+
  xlab(&amp;quot;Career Strikeouts&amp;quot;)+
  ylab(&amp;quot;Career Homeruns&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-10-06-scatterplot_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;And that is how you do it! If you have any questions feel free to contact me and tune in for more exciting posts about the wonderous world of Rstudio and Data Science!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Time Series Fun!</title>
      <link>/post/time-series-fun/</link>
      <pubDate>Fri, 06 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/time-series-fun/</guid>
      <description>&lt;p&gt;Let’s construct a time series! First, let’s upload the three essential libraries: Lahman, sqldf, and ggplot2. Next, let’s establish and run a query to see how many homeruns Babe Ruth has had throughout his illustrious career. To set up our query, we need to run the ‘yearID’ to record the years Ruth has played, and ‘HR’ for his homeruns all from ‘batting.’ Of course, we need to know Ruth’s name in the columns so we type the syntax, ‘WHERE playerID=’ruthba01.’’ Once we have set up and ran our query we will find Ruth’s career homerun totals in a column in the console of Rstudio. However, wouldn’t it be nice to see the results in a visual manner? How about a time series?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(Lahman)
library(ggplot2) 
library(sqldf) 

# extracting the data-------------------
query&amp;lt;-&amp;quot;SELECT yearID, HR FROM Batting
WHERE playerID=&amp;#39;ruthba01&amp;#39;&amp;quot;
 
result&amp;lt;-sqldf(query)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to set up a time series, we need to run a ‘ggplot,’ to do this, and allow for further modifications on the time series, we must run the ggplot as ‘ggplot()+.’ On the next line, we run ‘geom_line()’ and plug in the data of the time series inside following parentheses to construct the line of the time series. Such information includes the HR’s represented in ‘data=result,’ the color of the line that represent the data ‘color=purple,’ the syntax of the x-axis and y-axis ‘aes(x=yearID,y=HR).’ Next, we need to create points on the line to represent the exact number for each year, put a ‘+’ sign at the end of the preceding line of syntax, and run ‘geom_point,’ in parantheses ‘data=result,’ the x and y-axis again aes(x=yearID,y=HR).‘To allow for a title to be placed on the time series, just as the histogram, place a’+‘sign at the end of the preceeding syntax and plug in ’ggtitle(),’ in this case let’s use ‘Ruth’s Homerun Totals Throughout His Career.’ Just to spice it up let’s re-name the x and y- axis, to do this we need to run ‘xlab,’ and on the next line ‘ylab,’ so we need to again type ‘+’ on the preceeding syntax. On ‘xlab’ let’s re-name ‘yearID’ to ‘Year’ and on the next line for ‘ylab’ let’s re-name it ‘Homeruns.’&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# visualizing the data----------------
ggplot()+
   geom_line(data=result,aes(x=yearID,y=HR),color=&amp;quot;purple&amp;quot;)+
   geom_point(data=result,aes(x=yearID,y=HR))+
   ggtitle(&amp;quot;Ruth&amp;#39;s Homerun Totals Throughout His Career&amp;quot;)+
   xlab(&amp;quot;Year&amp;quot;)+
   ylab(&amp;quot;Homeruns&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-10-06-time-series-fun_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;And that is how you do it! If you have any questions feel free to contact me and tune in for more exciting posts about the wonderous world of Rstudio and Data Science!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Intro to Histograms</title>
      <link>/post/intro-to-histograms/</link>
      <pubDate>Mon, 02 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/intro-to-histograms/</guid>
      <description>&lt;p&gt;Let’s construct a histogram! First, let’s upload the three essential libraries: Lahman, sqldf, and ggplot2. Next, let’s establish and run a query to see the difference in weight amongst those in the MLB. Once we have set up and ran our query we will find the different weights of all the players in a column in the console of Rstudio. However, wouldn’t it be nice to see the results in a visual manner? How about a histogram?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(Lahman)
library(ggplot2) 
library(sqldf) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: gsubfn&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: proto&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in doTryCatch(return(expr), name, parentenv, handler): unable to load shared object &amp;#39;/Library/Frameworks/R.framework/Resources/modules//R_X11.so&amp;#39;:
##   dlopen(/Library/Frameworks/R.framework/Resources/modules//R_X11.so, 6): Library not loaded: /opt/X11/lib/libSM.6.dylib
##   Referenced from: /Library/Frameworks/R.framework/Resources/modules//R_X11.so
##   Reason: image not found&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Could not load tcltk.  Will use slower R code instead.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: RSQLite&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# extracting the data-------------------

query&amp;lt;-&amp;quot;SELECT weight
FROM Master&amp;quot;

result&amp;lt;-sqldf(query)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to set up a histogram, we need to run a ‘ggplot,’ to do this, and allow for further modifications on the histogram, we must run the ggplot as ‘ggplot()+.’ On the next line, we run ‘geom_histogram’ and plug in the data of the histogram inside following parentheses such as the weight itself ‘data=result’ and their accompanying bars, the color of the bars that represent the data’color=purple,‘’fill=green,’ the syntax of the x-axis ‘aes(x=weight),’ and the specificity of the weight on the x-axis ‘bins=40.’ Finally, to put your mark on the histogram, put a ‘+’ sign at the end of the preceding line of syntax, to allow for a title to be placed on the histogram. On the next line run ‘ggtitle’ and in parentheses what you would like the title to be, in this case I used ‘Body Weight Distribution for Baseball Players.’&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# visualizing the data----------------

ggplot()+
  geom_histogram(data=result,aes(x=weight),color=&amp;quot;purple&amp;quot;,fill=&amp;quot;green&amp;quot;,bins=40)+
  ggtitle(&amp;quot;Body Weight Distribution for Baseball Players&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 854 rows containing non-finite values (stat_bin).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-10-02-intro-to-histograms_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;And that is how you do it! If you have any questions feel free to contact me and tune in for more exciting posts about the wonderous world of Rstudio and Data Science!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
